#! /usr/bin/env python3
#  -*- coding: utf-8 -*-

# Copyright (c) 2023, Roman Koch, koch.roman@gmail.com
# All rights reserved
#
# SPDX-License-Identifier: MIT

import sys
import os

_script = sys.argv[0]
_location = os.path.dirname(_script)


def generate_c_header(data, header_file, object_name, prefix):
    object_name = object_name.upper()
    prefix = prefix.upper()

    header_file.write('/**\n')
    header_file.write('\tAttention: do not modify autogenerated content\n\n')
    header_file.write(
        '\tAutogenerated by pixelicon from https://github.com/romsila/pixeltools\n')
    header_file.write(
        '\tCopyright (c) 2023, Roman Koch, koch.roman@gmail.com\n')
    header_file.write('\tAll rights reserved\n\n')
    header_file.write('\tSPDX-License-Identifier: MIT\n')
    header_file.write('*/\n\n')

    header_file.write(f'#ifndef __{prefix}_{object_name}_H__\n')
    header_file.write(f'#define __{prefix}_{object_name}_H__\n\n')

    header_file.write(
        f'extern const unsigned char {prefix}_{object_name}_WIDTH;\n')
    header_file.write(
        f'extern const unsigned char {prefix}_{object_name}_HEIGHT;\n')
    header_file.write('\n')

    sl = len(data)
    header_file.write(
        f'extern const unsigned char {prefix}_{object_name}[{sl}];\n')

    header_file.write('\n')
    header_file.write(f'#endif // __{prefix}_{object_name}_H__\n\n')


def generate_c_array(data, w, h, source_file, image_name, prefix):
    image_name = image_name.upper()

    source_file.write('/**\n')
    source_file.write('\tAttention: do not modify autogenerated content\n\n')
    source_file.write(
        '\tAutogenerated by pixelicon from https://github.com/romsila/pixeltools\n')
    source_file.write(
        '\tCopyright (c) 2023, Roman Koch, koch.roman@gmail.com\n')
    source_file.write('\tAll rights reserved\n\n')
    source_file.write('\tSPDX-License-Identifier: MIT\n')
    source_file.write('*/\n\n')

    header_filename = image_name.lower() + '.h'
    source_file.write(f'#include "image_{header_filename}"\n\n')

    source_file.write(f'const unsigned char IMAGE_{image_name}_WIDTH = {w};\n')
    source_file.write(
        f'const unsigned char IMAGE_{image_name}_HEIGHT = {h};\n')
    source_file.write('\n')

    sl = len(data)
    source_file.write(f'const unsigned char IMAGE_{image_name}[{sl}] = ')
    source_file.write('{\n')
    value_counter = 0
    for value in data:
        if value_counter == 0:
            source_file.write(' ' * 4)
        source_file.write('%s, ' % value)
        value_counter += 1
        if value_counter == 16:
            value_counter = 0
            source_file.write('\n')
    source_file.write('};\n')


def read_image(image_name):
    import png
    import array
    import numpy

    reader = png.Reader(filename=image_name)
    w, h, pixels, metadata = reader.read_flat()

    bla = numpy.array(pixels)
    bla = bla.reshape((h, w))

    # print(w, h, pixels, metadata)

    return w, h, bla


def generate_image(full_image_name, target_path):
    import sys
    import os

    if not os.path.exists(full_image_name):
        print('file', full_image_name, ' not found')
        return

    image_name = os.path.basename(full_image_name).split('.', 1)[0]

    w, h, image_matrix = read_image(full_image_name)
    from matrix import matrix2cols
    data = matrix2cols(image_matrix)

    image_name = image_name.replace('-', '_')

    map_file_name = os.path.join(target_path, f"image_{image_name}.txt")
    with open(map_file_name, "w") as image_map_file:
        from matrix import print_matrix
        print_matrix(image_matrix,
                     f'image {image_name}\n',
                     image_map_file)

    header_name = os.path.join(target_path, f"image_{image_name}.h")
    source_name = os.path.join(target_path, f"image_{image_name}.c")

    with open(header_name, 'w') as header_file:
        generate_c_header(data, header_file, image_name, prefix='image')

    with open(source_name, 'w') as source_file:
        generate_c_array(data, w, h, source_file, image_name, prefix='image')


def main():
    import sys
    try:
        source_directory = sys.argv[1]
        target_directory = sys.argv[2]
    except Exception as message:
        print('wrong path parameter', message)
        source_directory = 'resources/png'
        target_directory = 'resources/code'

    import os
    if os.path.isdir(source_directory):
        print('read from', source_directory)

        target_directory = os.path.abspath(target_directory)
        if not os.path.exists(target_directory):
            os.mkdir(target_directory)

        print('generate to', target_directory)

        for cur, _dirs, files in os.walk(source_directory):
            if cur != source_directory:
                break
            for f in sorted(files + _dirs):
                full_file_name = os.path.abspath(os.path.join(cur, f))
                print(full_file_name)
                generate_image(full_file_name, target_directory)
    else:
        print('directory ' + source_directory + ' not found')
