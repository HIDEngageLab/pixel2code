#! /usr/bin/env python3
#  -*- coding: utf-8 -*-

# Copyright (c) 2023, Roman Koch, koch.roman@gmail.com
# All rights reserved
#
# SPDX-License-Identifier: MIT

from matrix import rows2matrix, cols2matrix, matrix2rows, matrix2cols, print_matrix

symbol_name = 's'
symbol_name = symbol_name.upper()


def generate_c_header(data, header_file, object_name, prefix):
    object_name = object_name.upper()
    prefix = prefix.upper()

    header_file.write('/**\n')
    header_file.write('\tAttention: do not modify autogenerated content\n\n')
    header_file.write(
        '\tAutogenerated by pixelfont from https://github.com/romsila/pixeltools\n')
    header_file.write(
        '\tCopyright (c) 2023, Roman Koch, koch.roman@gmail.com\n')
    header_file.write('\tAll rights reserved\n\n')
    header_file.write('\tSPDX-License-Identifier: MIT\n')
    header_file.write('*/\n\n')

    header_file.write(f'#ifndef __{prefix}_{object_name}_H__\n')
    header_file.write(f'#define __{prefix}_{object_name}_H__\n\n')

    sl = 0
    font_table = []
    for item in data:
        s = item['symbol']
        sx = '%02X' % ord(s)
        sl = len(item['data'])
        header_file.write(
            f'extern const unsigned char {object_name}_{symbol_name}_{sx}[{sl}];\n')
        font_table.append(ord(s))
    if 0 not in font_table:
        header_file.write(
            f'extern const unsigned char {object_name}_{symbol_name}_00[{sl}];\n')
    header_file.write(
        f'extern const unsigned char *{prefix}_TABLE_{object_name}[128];\n')

    header_file.write('\n')
    header_file.write(f'#endif // __{prefix}_{object_name}_H__\n\n')


def generate_c_array(data, font_file, font_name, prefix):
    font_name = font_name.upper()
    prefix = prefix.upper()

    font_file.write('/**\n')
    font_file.write('\tAttention: do not modify autogenerated content\n\n')
    font_file.write(
        '\tAutogenerated by pixelfont from https://github.com/romsila/pixeltools\n')
    font_file.write('\tCopyright (c) 2023, Roman Koch, koch.roman@gmail.com\n')
    font_file.write('\tAll rights reserved\n\n')
    font_file.write('\tSPDX-License-Identifier: MIT\n')
    font_file.write('*/\n\n')

    header_filename = 'font_' + font_name.lower() + '.h'
    font_file.write(f'#include "{header_filename}"\n\n')

    font_table = []
    sl = 0
    for item in data:
        s = item['symbol']
        sx = '%02X' % ord(s)
        sl = len(item['data'])
        font_file.write(
            f'const unsigned char {font_name}_{symbol_name}_{sx}[{sl}] = ')
        font_file.write('{ ')
        for value in item['data']:
            font_file.write('%s, ' % value)
        font_file.write('};')
        font_file.write(f' /* \'{s}\' 0x{sx} */\n')
        font_table.append(ord(s))

    if 0 not in font_table:
        font_file.write(
            f'const unsigned char {font_name}_{symbol_name}_00[{sl}] = ')
        font_file.write('{ ')
        # font_file.write(' '*4)
        for index in range(0, sl):
            font_file.write('0x00, ')
        font_file.write('};')
        font_file.write(f' /* \' \' 0x00 */\n')

    font_file.write(
        f'const unsigned char *{prefix}_TABLE_{font_name}[128] =\n')
    font_file.write('{\n')
    line_len_counter = 0
    for index in range(0, 128):
        if line_len_counter == 0:
            font_file.write(' '*4)
        sx = '%02X' % index
        if index in font_table:
            font_file.write(f'{font_name}_{symbol_name}_{sx}, ')
        else:
            font_file.write(f'{font_name}_{symbol_name}_00, ')
        line_len_counter += 1
        if line_len_counter > 15:
            line_len_counter = 0
            font_file.write('\n')
    font_file.write('};\n')


def convert_font(font, w, h, rows, font_map_file=None):
    result = []
    for item in font:
        if rows is True:
            symbol_matrix = rows2matrix(item['data'], w, h)
        else:
            symbol_matrix = cols2matrix(item['data'], w, h)

        if font_map_file is not None:
            symbol = item['symbol']
            sx = '%02X' % ord(symbol)
            print_matrix(symbol_matrix,
                         f'symbol [{symbol}] 0x{sx}\n',
                         font_map_file)

        data = matrix2cols(symbol_matrix)
        trg_symbol = {'data': data, 'symbol': item['symbol']}
        result.append(trg_symbol)
    return result
